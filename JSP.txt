JSP页面:(jsp页面中可以包含指令标志,HTML代码,嵌入的Java代码)
指令标识:主要用于设定整个JSP页面范围内都有效的相关信息
语法:<%@ 指令名 属性1="属性值1" 属性2="属性值2" 属性3="属性值3"%>
指令名:page include taglib

page指令的常用属性:
language:设置jsp使用的语言,现在只支持java
import:jsp导包
pageEccoding:定义编码格式
contentType:设置页面的MIME类型和字符编码
session:设置是否使用会话对象
buffer:设置out输出对象的缓冲区大小
autoFlush:设置jsp页面缓存满时,是否自动刷新缓存
isErrorPage:将当前页面设置成错误处理页面
errorPage:指定处理当前jsp页面异常处理错误页面的另一个jsp页面,使用这个必须指定isErrorPage="true"


include指令:该指令可以在一个jsp页面中包含另外一个jsp页面,不过是静态包含,即使包含的文件中有jsp代码,包含时不会被编译执行.
语法:<%@ include file="path" %>


taglib指令:
<%@ taglib prefix="c" uri="tagURI" %>
prefix:指定标签的前缀
uri:指定标签库文件的存放位置

JSP表达式:
<%= 表达式 %>
例如:
<% String manager ="mr";%>
管理员:<%=manager %>
<%=5+6%>

声明标识:
声明标识用于JSP页面定义全局的变量或方法,通过声明标志定义的变量和方法可以被整个jsp页面访问
语法:
<%!
声明变量或方法的代码//这里的变量或方法一直持续到服务器关闭,也就是jsp每次刷新不会将变量或方法销毁
%>

代码片段:
语法:<% java代码或是脚本代码 %>
该代码片段只在本jsp页面有效,刷新就会销毁.

jsp注释:
1.//单行注释
2./**/多行注释
3.
/**
*
*提示信息注释
*
*/
4.隐藏注释:
<%--这里是隐藏注释,查看html源码是也看不见的注释--%>
5.动态注释:由于注释对jsp代码不起作用,可以利用他们的组合构成动态HTML注释文本
<!--<%=new Date()%>-->

动作标识:
包含文件标识:<jsp:include>
用于向当前页面包含其他文件,可以是动态文件亦可以是静态文件
<jsp:include page="" flush="" />
<jsp:include page="" flush="">
子动作标识<jsp:param>
</jsp:include>
page:用于指定包含文件的相对路径
flush:设置是否刷新缓冲区
param:用于向被包含的动态页面中传递参数

请求转发标识:<jsp:forward>:----该动作标识可以将请求转发到其他web资源,当前页面不再执行,而是去执行该标识指定的目标页面,(请求转发即服务器行为)
<jsp:forward page="url"/>
<jsp:forward page="url">子动作标识<jsp:param></jsp:forward>
page可以是指定路径的字符串,也可以是文件路径的表达式


传递参数标识:<jsp:param>
格式:<jsp:param name="" value=""/>
name:参数名
value:参数值
功能:这种形式与直接在文件路径后面加?name=value 效果相同

JSP内置对象:
1.request对象:该对象封装了有客户端生成的http请求的所有细节,包括http头信息,系统信息,请求方式,请求参数等
1.1访问请求参数:
请求参数的设置和获取:例如,<a href="delete.jsp?id=2"></a>这里的id就是要携带到目标页面的参数
获取参数:使用request.getParameter("id")方法获取携带过来的参数.

1.2在作用域中管理属性:
通过request.setAttribute(String name,Object object)来设置参数
通过request.getAttribute(String name);来获取参数

1.3获取cookie(Cookie:它是一小段文本信息,在网络服务器上生成,发送给浏览器,浏览器会以key/value的形式保存到某个指定的客户端机)
通过getCookies()方法获取cookie对象集合,得到cookie对象可以通过getName获取cookie对象指定名称,通过getValue获取cookie对象的值,
产生cookie:通过response.addCookie()方法向服务器发送一个cookie对象

1.4解决中文乱码
我们在通过request.getParameter()时,如果前端表单传过来的数据是中文,则可能会出现乱码现象.
解决方案:request.getParameter().getBytes("ISO-8859-1","UTF-8");

2.response对象:
2.1重定向网页:
使用response.sendRedirect("path")方法将网页重定向到另一个页面,重定向后request对象信息消失,


3.session对象:(被网络中称为会话,HTTP协议提供session,通过session可以在应用程序的web网页中进行跳转时,可以保存用户状态,使会话有效期到浏览器关闭为止.
3.1创建和获取客户的会话:
保存信息到session中:session.setAttribute(String name,Object object)
从session中读取信息:session.getAttribute(String name)

3.2从会话中移除绑定在session中的信息:
session.removeAttribute(String name)

3.3
session对象的销毁:
session.invalidate(),调用该方法后session对象的任何方法将无效,使用会抛出异常.

3.4会话超时管理:一般来说,session的生命周期位为20-30分钟,如果用户在session有效期外进行页面操作,将看到错误页面,这样的现象是不允许发生的.
解决方案:
session对象的几个设置会话生命周期的方法:
1.getLastAccessedTime()//返回客户端最后一个与会话相关联的请求时间
2.getMaxInactiveInterval()//返回一个会话内两个请求最大时间间隔
3.setMaxInactiveInterval(time)//设置session会话有效期,单位秒

3.5session对象的应用:
通过session.setAttribute(String name,Object object)保存信息到session对象中
通过session.getAttribute(String name)从指定的session对象中的信息读取出来

4application对象:该对象用于保存所有应用程序中的公共数据,它在服务器启动时创建,服务器停止销毁,所有用户共享application对象,application对象生命周期更长,类似于全局变量

5.out对象:(该对象用于在浏览器中输出信息)
5.1向客户端输出数据:
使用out.print()或者out.printIn()但是输出到浏览器的信息都将转化为字符串输出形式
例如jsp页面中<%out.print("hello i am out object");
                     %>

6.其他内置对象:
6.1pageContext对象:它可以获取jsp页面的request response session application对象等
说明:pageContext对象在jsp开发中很少使用,比较麻烦.

6.2exception对象:该对象用来处理jsp执行时发生的错误和异常,但是需要在page指令中设置isErrorPage为true才能使用该对象
方法:
getMessage()//返回exception对象的异常信息字符串
getLocalizedmessage()//返回本地的异常错误
toString()//返回关于异常错误中的简单信息描述







